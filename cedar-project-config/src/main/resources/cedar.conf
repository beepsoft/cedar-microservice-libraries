{
  // Keycloak server related settings.
  // These are used when the global objects are built in neo4j
  keycloak = {
    adminUser = {
      userName = "cedar-admin",
      // UUID of "cedar-admin" user from Keycloak.
      // You can find this after logging in  to the admin console of Keycloak.
      uuid = "${env.CEDAR_ADMIN_USER_UUID}",
      // Plain text password of "cedar-admin" user
      password = "${env.CEDAR_ADMIN_USER_PASSWORD}",
    },
    clientId = "admin-cli"
  },
  // Authentication mode.
  // noAuth=false => Keycloak token or apiKey auth is used
  // noAuth=true  => No authentication is used, it should be used for tests
  authentication = {
    noAuth = false
  },
  // MongoDB settings
  mongo = {
    // Database name
    databaseName = "cedar",
    databaseNameTest = "cedar-test",
    // Collection names
    collections = {
      field = "template-fields",
      element = "template-elements",
      template = "templates",
      instance = "template-instances",
      user = "users"
    }
  },
  // Neo4J settings
  neo4j = {
    // Rest API settings
    // You can find these values from the browser interface: http://localhost:7474/browser/
    // Sample values:
    //   transactionUrl = "http://localhost:7474/db/data/transaction/commit",
    //   authString = "Basic {base64(user:pass)}"
    rest = {
      transactionUrl = "${env.CEDAR_NEO4J_TRANSACTION_URL}",
      authString = "${env.CEDAR_NEO4J_AUTH_STRING}"
    }
  },
  // Elasticsearch settings
  elasticsearch = {
    cluster = "elasticsearch_cedar",
    index = "cedar-search",
    type = "resources",
    host = "127.0.0.1",
    transportPort = 9300,
    size = 1000,
    scrollKeepAlive = 60000
  },
  searchSettings = {
    searchRetrieveSettings = {
      limit = 100,
      limitIndexRegeneration = 50000,
      maxAttempts = 3,
      delayAttempts = 10000
    },
    searchDefaultSettings = {
      defaultLimit = 100,
      maxAllowedLimit = 1000
    }
  },
  // Elasticsearch settings
  elasticsearch = {
    cluster = "elasticsearch_cedar",
    index = "cedar-search",
    type = "resources",
    host = "127.0.0.1",
    transportPort = 9300,
    size = 1000,
    scrollKeepAlive = 60000,
    settings = {
      "index": {
        "analysis": {
          "tokenizer": {
            "ngram_tokenizer": {
              "type": "ngram",
              "min_gram": "1",
              "max_gram": "20"
            }
          },
          "analyzer": {
            "ngram_analyzer": {
              "tokenizer": "ngram_tokenizer",
              "filter": ["lowercase"]
            },
            "analyzer_keyword": {
              "tokenizer": "keyword",
              "filter": ["lowercase"]
            }
          }
        }
      }
    },
    mappings = {
      "properties": {
        "templateId": {
          "type": "string",
          "index": "not_analyzed"
        },
        "info": {
          "properties": {
            "@id": {
              "type": "string",
              "index": "not_analyzed"
            },
            "ownedBy": {
              "type": "string",
              "index": "not_analyzed"
            },
            "name": {
              "type": "string",
              "analyzer": "ngram_analyzer",
              "search_analyzer": "standard",
              "fields": {
                "raw": {
                  "type": "string",
                  "analyzer": "analyzer_keyword"
                }
              }
            }
          }
        }
      },
      "dynamic_templates": [
        {
          "template_nested_array": {
            "match_mapping_type": "array",
            "unmatch": "*_field",
            "mapping": {
              "type": "nested"
            }
          }
        },
        {
          "template_nested_object": {
            "match_mapping_type": "object",
            "unmatch": "*_field",
            "mapping": {
              "type": "nested"
            }
          }
        },
        {
          "template_common_fields": {
            "match_pattern": "regex",
            "match": "fieldName|fieldSemanticType|fieldValueSemanticType|fieldValueType",
            "mapping": {
              "type": "string",
              "index": "not_analyzed"
            }
          }
        },
        {
          "template_common_fields": {
            "match": "useForValueRecommendation",
            "mapping": {
              "type": "boolean",
            }
          }
        },
        {
          "template_value_string": {
            "match": "fieldValue_string",
            "mapping": {
              "type": "string",
              "index": "not_analyzed"
            }
          }
        },
        {
          "template_value_long": {
            "match": "fieldValue_long",
            "mapping": {
              "type": "long",
              "index": "not_analyzed"
            }
          }
        },
        {
          "template_value_integer": {
            "match": "fieldValue_integer",
            "mapping": {
              "type": "integer",
              "index": "not_analyzed"
            }
          }
        },
        {
          "template_value_short": {
            "match": "fieldValue_short",
            "mapping": {
              "type": "short",
              "index": "not_analyzed"
            }
          }
        },
        {
          "template_value_double": {
            "match": "fieldValue_double",
            "mapping": {
              "type": "double",
              "index": "not_analyzed"
            }
          }
        },
        {
          "template_value_float": {
            "match": "fieldValue_float",
            "mapping": {
              "type": "float",
              "index": "not_analyzed"
            }
          }
        },
        {
          "template_value_date": {
            "match": "fieldValue_date",
            "mapping": {
              "type": "date",
              "index": "not_analyzed"
            }
          }
        },
        {
          "template_value_boolean": {
            "match": "fieldValue_boolean",
            "mapping": {
              "type": "boolean",
              "index": "not_analyzed"
            }
          }
        }
      ]
    }
  },
  // Linked data settings
  // For ID generation
  linkedData = {
    base = "https://repo.${env.CEDAR_HOST}/",
    usersBase = "https://metadatacenter.org/users/"
  },
  // Global folder objects
  folderStructure = {
    rootFolder = {
      path = "/",
      description = "CEDAR Root Folder"
    },
    usersFolder = {
      path = "/Users",
      description = "CEDAR Users"
    },
    everybodyGroup = {
      name = "Everybody",
      displayName = "Everybody",
      description = "Group holding all the users"
    }
  },
  folderRESTAPI = {
    pagination = {
      defaultPageSize = 100,
      maxPageSize = 300
    }
  },
  // Server bases
  // for inter-service REST calls
  servers = {
    template = {
      base = "https://template.${env.CEDAR_HOST}/"
    }
    folder = {
      base = "https://folder.${env.CEDAR_HOST}/",
      users = "https://folder.${env.CEDAR_HOST}/users",
      groups = "https://folder.${env.CEDAR_HOST}/groups"
    },
    user = {
      base = "https://user.${env.CEDAR_HOST}/",
      usersBase = "https://user.${env.CEDAR_HOST}/users/"
    },
    resource = {
      base = "https://resource.${env.CEDAR_HOST}/",
      regenerateIndex = "https://resource.${env.CEDAR_HOST}/command/regenerate-search-index"
    },
    schema = {
      base = "https://schema.${env.CEDAR_HOST}/",
      coreBase = "https://schema.${env.CEDAR_HOST}/core/"
    }
  },
  frontend = {
    pagination = {
      defaultPageSize = 20,
      maxPageSize = 300
    }
  },
  // Default values for user profile
  // Used when generating user from blueprint
  blueprintUserProfile = {
    screenNameTemplate = "{firstName} {lastName}",
    homeFolderDescriptionTemplate = "Home folder of {firstName} {lastName}",
    defaultAPIKey = {
      serviceName = "CEDAR",
      description = "Auto-generated apiKey for CEDAR"
    },
    userRoles = {
      normal = [
        "templateCreator",
        "templateInstantiator"
      ],
      admin = [
        "templateCreator",
        "templateInstantiator",
        "administrator"
      ],
      builtInAdmin = [
        "templateCreator",
        "templateInstantiator",
        "builtInSystemAdministrator"
      ]
    }
  },
  // Default values for user profile
  // Used when generating user from blueprint
  // WORKAROUND: this should be inside blueprintUserProfile, but it is not handled properly by guice.conf
  // This is why it is pulled one level up
  blueprintUIPreferences = {
    folderView = {
      sortBy = "name",
      sortDirection = "asc",
      viewMode = "grid"
    },
    populateATemplate = {
      sortBy = "name",
      sortDirection = "asc",
      viewMode = "grid",
      opened = true
    }
  },
  importExport = {
    exportDir = "${env.CEDAR_HOME}export/",
  },
  templateRESTAPI = {
    pagination = {
      defaultPageSize = 20,
      maxPageSize = 300
    },
    excludedFields = [
      "_id",
    ]
  },
  templateRESTAPISummaries = {
    field = {
      fields = [
        "@id",
        "_ui.title",
        "_ui.description",
      ]
    },
    element = {
      fields = [
        "@id",
        "_ui.title",
        "_ui.description",
      ]
    },
    template = {
      fields = [
        "@id",
        "_ui.title",
        "_ui.description"
      ]
    },
    instance = {
      fields = [
        "@id",
        "_ui.title",
        "_ui.description",
      ]
    }
  }
  test = {
    base = "http://localhost",
    port = 3333,
    timeout = 10000,
    template = {
      baseRoute = "/templates"
    },
    element = {
      baseRoute = "/template-elements"
    },
    field = {
      baseRoute = "/template-fields"
    },
    instance = {
      baseRoute = "/template-instances"
    }
  }
}